"""Fix user roles relationship

Revision ID: 5bb8dbba77e3
Revises: None
Create Date: 2025-06-16 15:38:46.088450

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '5bb8dbba77e3'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    """Create all application tables."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('sports',
    sa.Column('sport_id', sa.INTEGER(), server_default=sa.text("nextval('sports_sport_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('code', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('sport_id', name='sports_pkey'),
    sa.UniqueConstraint('code', name='sports_code_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    sa.UniqueConstraint('name', name='sports_name_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_table('positions',
    sa.Column('position_id', sa.INTEGER(), server_default=sa.text("nextval('positions_position_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('sport_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('code', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['sport_id'], ['sports.sport_id'], name='positions_sport_id_fkey'),
    sa.PrimaryKeyConstraint('position_id', name='positions_pkey'),
    sa.UniqueConstraint('sport_id', 'code', name='uq_sport_position_code', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_table('oauth_providers',
    sa.Column('provider_id', sa.INTEGER(), server_default=sa.text("nextval('oauth_providers_provider_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('provider_name', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('client_id', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('client_secret_encrypted', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('authorization_url', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('token_url', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('scopes', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('provider_id', name='oauth_providers_pkey'),
    sa.UniqueConstraint('provider_name', name='oauth_providers_provider_name_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_table('athlete_profiles',
    sa.Column('athlete_id', sa.VARCHAR(length=36), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.VARCHAR(length=36), autoincrement=False, nullable=False),
    sa.Column('primary_sport_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('primary_position_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('height_cm', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('weight_kg', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=True),
    sa.Column('date_of_birth', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('nationality', sa.VARCHAR(length=3), autoincrement=False, nullable=True),
    sa.Column('birthplace_city', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('birthplace_country', sa.VARCHAR(length=3), autoincrement=False, nullable=True),
    sa.Column('career_status', postgresql.ENUM('ACTIVE', 'INACTIVE', 'RETIRED', 'SUSPENDED', name='athletestatus'), autoincrement=False, nullable=True),
    sa.Column('professional_debut_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('years_professional', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('current_team', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('jersey_number', sa.VARCHAR(length=5), autoincrement=False, nullable=True),
    sa.Column('bio', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('profile_image_url', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('is_verified', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('verification_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('search_vector', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('overall_rating', sa.NUMERIC(precision=4, scale=2), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.CheckConstraint('height_cm >= 100 AND height_cm <= 250', name=op.f('ck_height_reasonable')),
    sa.CheckConstraint('overall_rating >= 0::numeric AND overall_rating <= 99.99', name=op.f('ck_rating_range')),
    sa.CheckConstraint('weight_kg >= 30::numeric AND weight_kg <= 200::numeric', name=op.f('ck_weight_reasonable')),
    sa.ForeignKeyConstraint(['primary_position_id'], ['positions.position_id'], name=op.f('athlete_profiles_primary_position_id_fkey')),
    sa.ForeignKeyConstraint(['primary_sport_id'], ['sports.sport_id'], name=op.f('athlete_profiles_primary_sport_id_fkey')),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], name=op.f('athlete_profiles_user_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('athlete_id', name=op.f('athlete_profiles_pkey')),
    sa.UniqueConstraint('user_id', name=op.f('athlete_profiles_user_id_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    with op.batch_alter_table('athlete_profiles', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('idx_athletes_status_verified'), ['career_status', 'is_verified'], unique=False)
        batch_op.create_index(batch_op.f('idx_athletes_sport_position'), ['primary_sport_id', 'primary_position_id'], unique=False)
        batch_op.create_index(batch_op.f('idx_athletes_search'), ['search_vector'], unique=False)

    op.create_table('roles',
    sa.Column('role_id', sa.INTEGER(), server_default=sa.text("nextval('roles_role_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_system_role', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('role_id', name='roles_pkey'),
    sa.UniqueConstraint('name', name='roles_name_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_table('users',
    sa.Column('user_id', sa.VARCHAR(length=36), autoincrement=False, nullable=False),
    sa.Column('username', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('email_verified', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('password_hash', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('first_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('last_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('status', postgresql.ENUM('ACTIVE', 'INACTIVE', 'SUSPENDED', 'PENDING', name='userstatus'), autoincrement=False, nullable=False),
    sa.Column('last_login', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('login_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('user_id', name='users_pkey'),
    postgresql_ignore_search_path=False
    )
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_users_username'), ['username'], unique=True)
        batch_op.create_index(batch_op.f('ix_users_email'), ['email'], unique=True)
        batch_op.create_index(batch_op.f('idx_users_username_status'), ['username', 'status'], unique=False)
        batch_op.create_index(batch_op.f('idx_users_email_status'), ['email', 'status'], unique=False)

    op.create_table('user_oauth_accounts',
    sa.Column('account_id', sa.VARCHAR(length=36), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.VARCHAR(length=36), autoincrement=False, nullable=False),
    sa.Column('provider_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('provider_user_id', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('access_token_encrypted', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('refresh_token_encrypted', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('token_expires_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('provider_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['provider_id'], ['oauth_providers.provider_id'], name=op.f('user_oauth_accounts_provider_id_fkey')),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], name=op.f('user_oauth_accounts_user_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('account_id', name=op.f('user_oauth_accounts_pkey')),
    sa.UniqueConstraint('provider_id', 'provider_user_id', name=op.f('uq_provider_user'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    with op.batch_alter_table('user_oauth_accounts', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('idx_oauth_user_provider'), ['user_id', 'provider_id'], unique=False)

    op.create_table('user_roles',
    sa.Column('user_role_id', sa.VARCHAR(length=36), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.VARCHAR(length=36), autoincrement=False, nullable=False),
    sa.Column('role_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('assigned_by', sa.VARCHAR(length=36), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['assigned_by'], ['users.user_id'], name=op.f('user_roles_assigned_by_fkey')),
    sa.ForeignKeyConstraint(['role_id'], ['roles.role_id'], name=op.f('user_roles_role_id_fkey'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], name=op.f('user_roles_user_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('user_role_id', name=op.f('user_roles_pkey')),
    sa.UniqueConstraint('user_id', 'role_id', name=op.f('uq_user_role'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    # ### end Alembic commands ###


def downgrade():
    """Drop all application tables."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('user_roles')
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('idx_users_email_status'))
        batch_op.drop_index(batch_op.f('idx_users_username_status'))
        batch_op.drop_index(batch_op.f('ix_users_email'))
        batch_op.drop_index(batch_op.f('ix_users_username'))

    op.drop_table('users')
    with op.batch_alter_table('user_oauth_accounts', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('idx_oauth_user_provider'))

    op.drop_table('user_oauth_accounts')
    op.drop_table('roles')
    with op.batch_alter_table('athlete_profiles', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('idx_athletes_search'))
        batch_op.drop_index(batch_op.f('idx_athletes_sport_position'))
        batch_op.drop_index(batch_op.f('idx_athletes_status_verified'))

    op.drop_table('athlete_profiles')
    op.drop_table('oauth_providers')
    op.drop_table('positions')
    op.drop_table('sports')
    # ### end Alembic commands ###
